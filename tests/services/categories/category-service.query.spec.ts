import { faker } from '@faker-js/faker';
import Category, { type CategoryInterface } from '../../../app/db/models/Categories.ts';
import categoryService from '../../../app/services/categories/CategoryService.ts';
import { CategoryError, CategoryNotFoundError } from '../../../app/services/errors/CategoryErrors.ts';
import { setupCategoryTestSuite } from './category-test-utils.ts';

type CategoryWithChildren = CategoryInterface & {
  children?: CategoryWithChildren[];
};

describe('CategoryService - Query Operations', () => {
  const { setCategoryTestData } = setupCategoryTestSuite();

  describe('categoryService.getCategoryAncestors', () => {
    it('should return ancestors in correct order', async () => {
      const brandName = `${faker.company.name()} Brand`;
      const categoryName = `${faker.commerce.department()} Category`;
      const subcategoryName = `${faker.commerce.productAdjective()} ${faker.commerce.product()} Subcategory`;

      const brand = await categoryService.createCategory({
        name: brandName,
        description: `${brandName} generated by faker for testing`,
        level: 0,
        parentId: null,
        sortOrder: 1,
      });

      const category = await categoryService.createCategory({
        name: categoryName,
        description: `${categoryName} generated by faker for testing`,
        level: 1,
        parentId: brand._id!.toString(),
        sortOrder: 1,
      });

      const subcategory = await categoryService.createCategory({
        name: subcategoryName,
        description: `${subcategoryName} generated by faker for testing`,
        level: 2,
        parentId: category._id!.toString(),
        sortOrder: 1,
      });

      const ancestors = await categoryService.getCategoryAncestors(subcategory._id!.toString());

      expect(ancestors).toHaveLength(2);
      expect(ancestors[0].name).toBe(brandName);
      expect(ancestors[0].level).toBe(0);
      expect(ancestors[1].name).toBe(categoryName);
      expect(ancestors[1].level).toBe(1);

      setCategoryTestData({
        brandId: brand._id!.toString(),
        categoryId: category._id!.toString(),
        subcategoryId: subcategory._id!.toString(),
      });
    });

    it('should return empty array for root category', async () => {
      const brandName = `${faker.company.name()} Brand`;

      const brand = await categoryService.createCategory({
        name: brandName,
        description: `${brandName} generated by faker for testing`,
        level: 0,
        parentId: null,
        sortOrder: 1,
      });

      const ancestors = await categoryService.getCategoryAncestors(brand._id!.toString());
      expect(ancestors).toHaveLength(0);

      setCategoryTestData({
        brandId: brand._id!.toString(),
      });
    });

    it('should throw error for invalid category ID', async () => {
      await expect(categoryService.getCategoryAncestors('invalid-id')).rejects.toThrow(CategoryError);
      await expect(categoryService.getCategoryAncestors('507f1f77bcf86cd799439011')).rejects.toThrow(CategoryNotFoundError);
    });
  });

  describe('categoryService.getCategoryDescendants', () => {
    it('should return descendants in correct order', async () => {
      const brandName = `${faker.company.name()} Brand`;
      const categoryName = `${faker.commerce.department()} Category`;
      const subcategoryName = `${faker.commerce.productAdjective()} ${faker.commerce.product()} Subcategory`;

      const brand = await categoryService.createCategory({
        name: brandName,
        description: `${brandName} generated by faker for testing`,
        level: 0,
        parentId: null,
        sortOrder: 1,
      });

      const category = await categoryService.createCategory({
        name: categoryName,
        description: `${categoryName} generated by faker for testing`,
        level: 1,
        parentId: brand._id!.toString(),
        sortOrder: 1,
      });

      const subcategory = await categoryService.createCategory({
        name: subcategoryName,
        description: `${subcategoryName} generated by faker for testing`,
        level: 2,
        parentId: category._id!.toString(),
        sortOrder: 1,
      });

      const descendants = await categoryService.getCategoryDescendants(brand._id!.toString());

      expect(descendants).toHaveLength(2);
      expect(descendants[0].name).toBe(categoryName);
      expect(descendants[0].level).toBe(1);
      expect(descendants[1].name).toBe(subcategoryName);
      expect(descendants[1].level).toBe(2);

      setCategoryTestData({
        brandId: brand._id!.toString(),
        categoryId: category._id!.toString(),
        subcategoryId: subcategory._id!.toString(),
      });
    });

    it('should throw error for invalid category ID', async () => {
      await expect(categoryService.getCategoryDescendants('invalid-id')).rejects.toThrow(CategoryError);
      await expect(categoryService.getCategoryDescendants('507f1f77bcf86cd799439011')).rejects.toThrow(CategoryNotFoundError);
    });
  });

  describe('categoryService.getCategoryTree', () => {
    it('should build proper category tree structure', async () => {
      const brandName = `${faker.company.name()} Brand`;
      const categoryName = `${faker.commerce.department()} Category`;
      const subcategoryName = `${faker.commerce.productAdjective()} ${faker.commerce.product()} Subcategory`;

      const brand = await categoryService.createCategory({
        name: brandName,
        description: `${brandName} generated by faker for testing`,
        level: 0,
        parentId: null,
        sortOrder: 1,
      });

      const category = await categoryService.createCategory({
        name: categoryName,
        description: `${categoryName} generated by faker for testing`,
        level: 1,
        parentId: brand._id!.toString(),
        sortOrder: 1,
      });

      const subcategory = await categoryService.createCategory({
        name: subcategoryName,
        description: `${subcategoryName} generated by faker for testing`,
        level: 2,
        parentId: category._id!.toString(),
        sortOrder: 1,
      });

      const tree = (await categoryService.getCategoryTree(0)) as CategoryWithChildren[];

      const testBrandNode = tree.find((node) => node.name === brandName);
      expect(testBrandNode).toBeDefined();
      expect(testBrandNode!.children).toBeDefined();
      expect(testBrandNode!.children).toHaveLength(1);

      const testCategoryNode = testBrandNode!.children![0];
      expect(testCategoryNode.name).toBe(categoryName);
      expect(testCategoryNode.children).toHaveLength(1);

      const testSubcategoryNode = testCategoryNode.children![0];
      expect(testSubcategoryNode.name).toBe(subcategoryName);
      expect(testSubcategoryNode.children).toHaveLength(0);

      setCategoryTestData({
        brandId: brand._id!.toString(),
        categoryId: category._id!.toString(),
        subcategoryId: subcategory._id!.toString(),
      });
    });
  });

  describe('categoryService.getCategories', () => {
    it('should return paginated results', async () => {
      const categories: CategoryInterface[] = [];
      for (let i = 0; i < 3; i++) {
        const brandName = `${faker.company.name()} Brand ${i}`;
        const brand = await categoryService.createCategory({
          name: brandName,
          description: `${brandName} generated by faker for testing`,
          level: 0,
          parentId: null,
          sortOrder: i,
        });
        categories.push(brand);
      }

      const result = await categoryService.getCategories({
        page: 1,
        limit: 2,
        level: 0,
      });

      expect(result.data.length).toBeLessThanOrEqual(2);
      expect(result.total).toBeGreaterThanOrEqual(3);
      expect(result.page).toBe(1);
      expect(result.totalPages).toBeGreaterThanOrEqual(2);

      await Category.deleteMany({
        _id: { $in: categories.map((c) => c._id) },
      });
    });

    it('should filter by level', async () => {
      const brandName = `${faker.company.name()} Brand`;
      const categoryName = `${faker.commerce.department()} Category`;

      const brand = await categoryService.createCategory({
        name: brandName,
        description: `${brandName} generated by faker for testing`,
        level: 0,
        parentId: null,
        sortOrder: 1,
      });

      const category = await categoryService.createCategory({
        name: categoryName,
        description: `${categoryName} generated by faker for testing`,
        level: 1,
        parentId: brand._id!.toString(),
        sortOrder: 1,
      });

      const level0Result = await categoryService.getCategories({ level: 0 });
      const testBrandExists = level0Result.data.some((cat) => cat.name === brandName);
      const testCategoryExists = level0Result.data.some((cat) => cat.name === categoryName);

      expect(testBrandExists).toBe(true);
      expect(testCategoryExists).toBe(false);

      const level1Result = await categoryService.getCategories({ level: 1 });
      const level1BrandExists = level1Result.data.some((cat) => cat.name === brandName);
      const level1CategoryExists = level1Result.data.some((cat) => cat.name === categoryName);

      expect(level1BrandExists).toBe(false);
      expect(level1CategoryExists).toBe(true);

      setCategoryTestData({
        brandId: brand._id!.toString(),
        categoryId: category._id!.toString(),
      });
    });
  });
});