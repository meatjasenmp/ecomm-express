import { faker } from '@faker-js/faker';
import categoryService from '../../../app/services/categories/CategoryService.ts';
import { CategoryError } from '../../../app/services/errors/CategoryErrors.ts';
import { setupCategoryTestSuite } from './category-test-utils.ts';

describe('CategoryService - Restore Operations', () => {
  const { setCategoryTestData } = setupCategoryTestSuite();

  describe('categoryService.restoreCategory', () => {
    it('should restore a soft deleted category', async () => {
      const brandName = `${faker.company.name()} Brand`;
      const categoryName = `${faker.commerce.department()} Category`;
      
      const brand = await categoryService.createCategory({
        name: brandName,
        description: `${brandName} generated by faker for testing`,
        level: 0,
        parentId: null,
        sortOrder: 1,
      });

      const category = await categoryService.createCategory({
        name: categoryName,
        description: `${categoryName} generated by faker for testing`,
        level: 1,
        parentId: brand._id!.toString(),
        sortOrder: 1,
      });

      await categoryService.deleteCategory(category._id!.toString());
      const deletedCategories = await categoryService.getCategories({ level: 1 });
      const isDeleted = !deletedCategories.data.some((cat) => cat._id?.toString() === category._id?.toString());
      expect(isDeleted).toBe(true);

      const restoredCategory = await categoryService.restoreCategory(category._id!.toString());
      expect(restoredCategory).toBeDefined();
      expect(restoredCategory._id?.toString()).toBe(category._id?.toString());
      expect(restoredCategory.deletedAt).toBeNull();

      const restoredCategories = await categoryService.getCategories({ level: 1 });
      const isRestored = restoredCategories.data.some((cat) => cat._id?.toString() === category._id?.toString());
      expect(isRestored).toBe(true);

      setCategoryTestData({
        brandName,
        categoryName,
        subcategoryName: '',
        brandId: brand._id!.toString(),
        categoryId: category._id!.toString(),
        subcategoryId: '',
      });
    });

    it('should throw error when restoring non-deleted category', async () => {
      const brandName = `${faker.company.name()} Brand`;
      
      const brand = await categoryService.createCategory({
        name: brandName,
        description: `${brandName} generated by faker for testing`,
        level: 0,
        parentId: null,
        sortOrder: 1,
      });

      await expect(categoryService.restoreCategory(brand._id!.toString()))
        .rejects.toThrow('Category not found or not deleted');

      setCategoryTestData({
        brandName,
        categoryName: '',
        subcategoryName: '',
        brandId: brand._id!.toString(),
        categoryId: '',
        subcategoryId: '',
      });
    });

    it('should throw error for invalid category ID', async () => {
      await expect(categoryService.restoreCategory('invalid-id')).rejects.toThrow(CategoryError);
    });
  });
});