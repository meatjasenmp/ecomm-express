import { faker } from '@faker-js/faker';
import categoryService from '../../../app/services/categories/CategoryService.ts';
import { setupCategoryTestSuite } from './category-test-utils.ts';

describe('CategoryService - Create Operations', () => {
  const { setCategoryTestData } = setupCategoryTestSuite();

  describe('categoryService.createCategory', () => {
    it('should create a hierarchical category structure', async () => {
      const brandName = `${faker.company.name()} Brand`;
      const categoryName = `${faker.commerce.department()} Category`;
      const subcategoryName = `${faker.commerce.productAdjective()} ${faker.commerce.product()} Subcategory`;

      const brand = await categoryService.createCategory({
        name: brandName,
        description: `${brandName} generated by faker for testing`,
        level: 0,
        parentId: null,
        sortOrder: 1,
      });

      expect(brand).toBeDefined();
      expect(brand.name).toBe(brandName);
      expect(brand.level).toBe(0);
      expect(brand.parentId).toBeNull();
      expect(brand.ancestors).toEqual([]);
      expect(brand.path).toBe(faker.helpers.slugify(brandName.toLowerCase()));

      const category = await categoryService.createCategory({
        name: categoryName,
        description: `${categoryName} generated by faker for testing`,
        level: 1,
        parentId: brand._id!.toString(),
        sortOrder: 1,
      });

      expect(category).toBeDefined();
      expect(category.name).toBe(categoryName);
      expect(category.level).toBe(1);
      expect(category.parentId).toBe(brand._id!.toString());
      expect(category.ancestors).toEqual([brand.path]);

      const subcategory = await categoryService.createCategory({
        name: subcategoryName,
        description: `${subcategoryName} generated by faker for testing`,
        level: 2,
        parentId: category._id!.toString(),
        sortOrder: 1,
      });

      expect(subcategory).toBeDefined();
      expect(subcategory.name).toBe(subcategoryName);
      expect(subcategory.level).toBe(2);
      expect(subcategory.parentId).toBe(category._id!.toString());
      expect(subcategory.ancestors).toEqual([brand.path, category.path]);

      setCategoryTestData({
        brandName,
        categoryName,
        subcategoryName,
        brandId: brand._id!.toString(),
        categoryId: category._id!.toString(),
        subcategoryId: subcategory._id!.toString(),
      });
    });

    it('should throw error for invalid hierarchy', async () => {
      const brandName = `${faker.company.name()} Brand`;

      const brand = await categoryService.createCategory({
        name: brandName,
        description: `${brandName} generated by faker for testing`,
        level: 0,
        parentId: null,
        sortOrder: 1,
      });

      const invalidCategoryName = `${faker.commerce.productName()} Invalid Category`;

      await expect(
        categoryService.createCategory({
          name: invalidCategoryName,
          description: `${invalidCategoryName} - invalid hierarchy test`,
          level: 2,
          parentId: brand._id!.toString(),
          sortOrder: 1,
        }),
      ).rejects.toThrow();

      setCategoryTestData({
        brandName,
        categoryName: '',
        subcategoryName: '',
        brandId: brand._id!.toString(),
        categoryId: '',
        subcategoryId: '',
      });
    });

    it('should throw error for duplicate category name', async () => {
      const categoryName = `${faker.commerce.department()} Unique Category`;

      const firstCategory = await categoryService.createCategory({
        name: categoryName,
        description: `${categoryName} generated by faker for testing`,
        level: 0,
        parentId: null,
        sortOrder: 1,
      });

      await expect(
        categoryService.createCategory({
          name: categoryName,
          description: `${categoryName} - duplicate name test`,
          level: 0,
          parentId: null,
          sortOrder: 2,
        }),
      ).rejects.toThrow(`Category with name "${categoryName}" already exists`);

      setCategoryTestData({
        brandName: categoryName,
        categoryName: '',
        subcategoryName: '',
        brandId: firstCategory._id!.toString(),
        categoryId: '',
        subcategoryId: '',
      });
    });

    it('should prevent creating category with same name as soft deleted one', async () => {
      const categoryName = `${faker.commerce.department()} Deleted Category`;

      const originalCategory = await categoryService.createCategory({
        name: categoryName,
        description: `${categoryName} generated by faker for testing`,
        level: 0,
        parentId: null,
        sortOrder: 1,
      });

      await categoryService.deleteCategory(originalCategory._id!.toString());

      await expect(
        categoryService.createCategory({
          name: categoryName,
          description: `${categoryName} - attempt to duplicate deleted category`,
          level: 0,
          parentId: null,
          sortOrder: 2,
        }),
      ).rejects.toThrow(`Category with name "${categoryName}" already exists`);

      setCategoryTestData({
        brandName: categoryName,
        categoryName: '',
        subcategoryName: '',
        brandId: originalCategory._id!.toString(),
        categoryId: '',
        subcategoryId: '',
      });
    });
  });
});