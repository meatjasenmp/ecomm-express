import { faker } from '@faker-js/faker';
import categoryService from '../../../app/services/categories/CategoryService.ts';
import { setupCategoryTestSuite } from './category-test-utils.ts';

describe('CategoryService - Update Operations', () => {
  const { setCategoryTestData } = setupCategoryTestSuite();

  describe('categoryService.updateCategory', () => {
    it('should prevent updating category name to duplicate existing name', async () => {
      const firstCategoryName = `${faker.commerce.department()} First Category`;
      const secondCategoryName = `${faker.commerce.department()} Second Category`;

      const firstCategory = await categoryService.createCategory({
        name: firstCategoryName,
        description: `${firstCategoryName} generated by faker for testing`,
        level: 0,
        parentId: null,
        sortOrder: 1,
      });

      const secondCategory = await categoryService.createCategory({
        name: secondCategoryName,
        description: `${secondCategoryName} generated by faker for testing`,
        level: 0,
        parentId: null,
        sortOrder: 2,
      });

      await expect(
        categoryService.updateCategory(secondCategory._id!.toString(), {
          name: firstCategoryName,
        }),
      ).rejects.toThrow(`Category with name "${firstCategoryName}" already exists`);

      setCategoryTestData({
        brandName: firstCategoryName,
        categoryName: secondCategoryName,
        subcategoryName: '',
        brandId: firstCategory._id!.toString(),
        categoryId: secondCategory._id!.toString(),
        subcategoryId: '',
      });
    });

    it('should prevent updating category name to duplicate soft deleted name', async () => {
      const deletedCategoryName = `${faker.commerce.department()} Deleted Category`;
      const activeCategoryName = `${faker.commerce.department()} Active Category`;

      const deletedCategory = await categoryService.createCategory({
        name: deletedCategoryName,
        description: `${deletedCategoryName} generated by faker for testing`,
        level: 0,
        parentId: null,
        sortOrder: 1,
      });

      const activeCategory = await categoryService.createCategory({
        name: activeCategoryName,
        description: `${activeCategoryName} generated by faker for testing`,
        level: 0,
        parentId: null,
        sortOrder: 2,
      });

      await categoryService.deleteCategory(deletedCategory._id!.toString());

      await expect(
        categoryService.updateCategory(activeCategory._id!.toString(), {
          name: deletedCategoryName,
        }),
      ).rejects.toThrow(`Category with name "${deletedCategoryName}" already exists`);

      setCategoryTestData({
        brandName: deletedCategoryName,
        categoryName: activeCategoryName,
        subcategoryName: '',
        brandId: deletedCategory._id!.toString(),
        categoryId: activeCategory._id!.toString(),
        subcategoryId: '',
      });
    });

    it('should allow updating category with same name', async () => {
      const categoryName = `${faker.commerce.department()} Same Name Category`;

      const category = await categoryService.createCategory({
        name: categoryName,
        description: `${categoryName} generated by faker for testing`,
        level: 0,
        parentId: null,
        sortOrder: 1,
      });

      const updatedCategory = await categoryService.updateCategory(category._id!.toString(), {
        name: categoryName,
        description: 'Updated description',
      });

      expect(updatedCategory.name).toBe(categoryName);
      expect(updatedCategory.description).toBe('Updated description');

      setCategoryTestData({
        brandName: categoryName,
        categoryName: '',
        subcategoryName: '',
        brandId: category._id!.toString(),
        categoryId: '',
        subcategoryId: '',
      });
    });
  });
});