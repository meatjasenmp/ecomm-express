import mongoose from 'mongoose';
import { faker } from '@faker-js/faker';
import Category, { type CategoryInterface } from '../../app/db/models/Categories.js';
import {
  createCategoryWithHierarchy,
  buildCategoryTree,
  getCategoryAncestors,
  getCategoryDescendants,
  getCategoriesPaginated,
  validateCategoryHierarchy,
  createSlug,
  CategoryError,
} from '../../app/helpers/category-utils.js';
import 'dotenv/config';

async function connectDB() {
  const uri = process.env.ATLAS_URI;
  if (!uri) {
    throw new Error('ATLAS_URI not found in environment variables');
  }

  try {
    await mongoose.connect(uri);
    console.log('‚úÖ Connected to MongoDB Atlas');
  } catch (error) {
    console.error('‚ùå MongoDB connection error:', (error as Error).message);
    process.exit(1);
  }
}

async function testCategoryUtils() {
  console.log('\nüß™ Testing Production Category Utilities...\n');

  // Seed faker for consistent results in testing
  faker.seed(123);

  try {
    // Clean up any existing test data - look for faker-generated names
    await Category.deleteMany({
      $or: [{ path: { $regex: /^(brand|category|subcategory)-/i } }, { description: { $regex: /faker/i } }],
    });

    // Generate realistic category names
    const brandName = `${faker.company.name()} Brand`;
    const categoryName = `${faker.commerce.department()} Category`;
    const subcategoryName = `${faker.commerce.productAdjective()} ${faker.commerce.product()} Subcategory`;

    // Test 1: Create categories
    console.log('1Ô∏è‚É£ Testing createCategoryWithHierarchy...');

    const brand = await createCategoryWithHierarchy({
      name: brandName,
      description: `${brandName} generated by faker for testing`,
      level: 0,
      parentId: null,
      sortOrder: 1,
    });
    const brandId = brand._id!.toString();
    console.log('‚úÖ Created brand:', brand.name, '- Path:', brand.path);
    console.log('   Ancestors:', brand.ancestors);

    const category = await createCategoryWithHierarchy({
      name: categoryName,
      description: `${categoryName} generated by faker for testing`,
      level: 1,
      parentId: brandId,
      sortOrder: 1,
    });
    const categoryId = category._id!.toString();
    console.log('‚úÖ Created category:', category.name, '- Path:', category.path);
    console.log('   Ancestors:', category.ancestors);

    const subcategory = await createCategoryWithHierarchy({
      name: subcategoryName,
      description: `${subcategoryName} generated by faker for testing`,
      level: 2,
      parentId: categoryId,
      sortOrder: 1,
    });
    const subcategoryId = subcategory._id!.toString();
    console.log('‚úÖ Created subcategory:', subcategory.name, '- Path:', subcategory.path);
    console.log('   Ancestors:', subcategory.ancestors);

    // Test 2: Slug creation
    console.log('\n2Ô∏è‚É£ Testing slug creation...');
    const testSlugName1 = `${faker.company.name()} Air Max`;
    const testSlugName2 = `${faker.commerce.productAdjective()} Running Shoes!!!`;
    const testSlugName3 = `  Multiple   ${faker.commerce.product()}  `;
    console.log(`‚úÖ "${testSlugName1}" ‚Üí`, createSlug(testSlugName1));
    console.log(`‚úÖ "${testSlugName2}" ‚Üí`, createSlug(testSlugName2));
    console.log(`‚úÖ "${testSlugName3}" ‚Üí`, createSlug(testSlugName3));

    // Test 3: Get ancestors
    console.log('\n3Ô∏è‚É£ Testing getCategoryAncestors...');
    const ancestors = await getCategoryAncestors(subcategoryId);
    console.log(`‚úÖ Ancestors of ${subcategoryName}:`);
    ancestors.forEach((ancestor, i) => {
      console.log(`   ${i + 1}. ${ancestor.name} (${ancestor.path})`);
    });

    // Test 4: Get descendants
    console.log('\n4Ô∏è‚É£ Testing getCategoryDescendants...');
    const descendants = await getCategoryDescendants(brandId);
    console.log(`‚úÖ Descendants of ${brandName}:`);
    descendants.forEach((desc, i) => {
      const indent = '  '.repeat(desc.level - 1);
      console.log(`   ${i + 1}. ${indent}${desc.name} (Level ${desc.level})`);
    });

    // Test 5: Build category tree
    console.log('\n5Ô∏è‚É£ Testing buildCategoryTree...');
    const tree = await buildCategoryTree(0);
    console.log('‚úÖ Category tree structure:');

    type CategoryWithChildren = CategoryInterface & { children?: CategoryWithChildren[] };
    const printTree = (categories: CategoryWithChildren[], depth = 0) => {
      categories.forEach((cat) => {
        const indent = '  '.repeat(depth);
        console.log(`   ${indent}‚Ä¢ ${cat.name} (${cat.path})`);
        if (cat.children && cat.children.length > 0) {
          printTree(cat.children, depth + 1);
        }
      });
    };

    printTree(tree.filter((cat) => cat.name.includes('faker') || cat.name.includes('Brand')));

    // Test 6: Validation
    console.log('\n6Ô∏è‚É£ Testing validateCategoryHierarchy...');

    // Valid case
    const validCategoryName = `${faker.commerce.productName()} Valid Category`;
    const validResult = await validateCategoryHierarchy({
      name: validCategoryName,
      level: 1,
      parentId: brandId,
    });
    console.log('‚úÖ Valid category validation:', validResult.valid ? 'PASSED' : 'FAILED');

    // Invalid case - wrong parent level
    const invalidCategoryName = `${faker.commerce.productName()} Invalid Category`;
    const invalidResult = await validateCategoryHierarchy({
      name: invalidCategoryName,
      level: 2,
      parentId: brandId, // Brand is level 0, but we're trying to create level 2
    });
    console.log('‚úÖ Invalid category validation:', invalidResult.valid ? 'FAILED' : 'PASSED');
    console.log('   Errors:', invalidResult.errors);

    // Test 7: Pagination
    console.log('\n7Ô∏è‚É£ Testing getCategoriesPaginated...');
    const paginatedResult = await getCategoriesPaginated({
      page: 1,
      limit: 10,
      level: 0,
    });
    console.log('‚úÖ Paginated categories (Level 0):');
    console.log(`   Total: ${paginatedResult.total}, Page: ${paginatedResult.page}/${paginatedResult.totalPages}`);
    paginatedResult.categories.forEach((cat, i) => {
      console.log(`   ${i + 1}. ${cat.name} (${cat.path})`);
    });

    // Test 8: Error handling
    console.log('\n8Ô∏è‚É£ Testing error handling...');
    try {
      await createCategoryWithHierarchy({
        name: '',
        description: `${faker.commerce.productDescription()} - Empty name test`,
        level: 0,
        parentId: null,
      });
    } catch (error) {
      if (error instanceof CategoryError) {
        console.log('‚úÖ Error handling works:', error.message);
      }
    }

    // Test 9: Create additional categories for tree testing
    console.log('\n9Ô∏è‚É£ Creating additional test categories...');

    const secondBrandName = `${faker.company.name()} Brand`;
    const secondCategoryName = `${faker.commerce.department()} Category`;
    const secondSubcategoryName = `${faker.commerce.productAdjective()} ${faker.commerce.product()} Subcategory`;

    const secondBrand = await createCategoryWithHierarchy({
      name: secondBrandName,
      description: `${secondBrandName} generated by faker for testing`,
      level: 0,
      parentId: null,
      sortOrder: 2,
    });
    console.log('‚úÖ Created brand:', secondBrand.name);

    const secondCategory = await createCategoryWithHierarchy({
      name: secondCategoryName,
      description: `${secondCategoryName} generated by faker for testing`,
      level: 1,
      parentId: secondBrand._id!.toString(),
      sortOrder: 1,
    });
    console.log('‚úÖ Created category:', secondCategory.name);

    const secondSubcategory = await createCategoryWithHierarchy({
      name: secondSubcategoryName,
      description: `${secondSubcategoryName} generated by faker for testing`,
      level: 2,
      parentId: secondCategory._id!.toString(),
      sortOrder: 1,
    });
    console.log('‚úÖ Created subcategory:', secondSubcategory.name);

    // Test 10: Final category tree structure
    console.log('\nüîü Final category tree structure:');
    const finalTree = await buildCategoryTree(0);
    printTree(finalTree.filter((cat) => cat.name.includes('faker') || cat.name.includes('Brand')));

    console.log('\nüéâ All production utility tests passed!');
  } catch (error) {
    console.error('‚ùå Test failed:', error);
    if (error instanceof CategoryError) {
      console.error('   Error code:', error.code);
      console.error('   Status code:', error.statusCode);
    }
  }
}

async function runTests() {
  await connectDB();
  await testCategoryUtils();
  await mongoose.disconnect();
  console.log('\n‚úÖ Disconnected from MongoDB');
}

runTests();
