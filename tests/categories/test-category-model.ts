import mongoose from 'mongoose';
import { faker } from '@faker-js/faker';
import Category from '../../app/db/models/Categories.js';
import 'dotenv/config';

async function connectDB() {
  const uri = process.env.ATLAS_URI;
  if (!uri) {
    throw new Error('ATLAS_URI not found in environment variables');
  }
  try {
    await mongoose.connect(uri);
    console.log('✅ Connected to MongoDB Atlas');
  } catch (error) {
    console.error('❌ MongoDB connection error:', error);
    process.exit(1);
  }
}

// Test creating hierarchical categories
async function testCategoryModel() {
  console.log('\n🧪 Testing Category Model...\n');

  // Seed faker for consistent results in testing
  faker.seed(456);

  try {
    // Clear existing test data - look for faker-generated names
    await Category.deleteMany({
      $or: [{ description: { $regex: /faker for testing/i } }, { path: { $regex: /^test-/ } }],
    });

    // Generate test names
    const brandName = `${faker.company.name()} Test Brand`;
    const brandSlug = `test-${faker.helpers.slugify(brandName.toLowerCase())}`;

    // Test 1: Create root level category (Brand - Level 0)
    console.log(`1️⃣ Creating Level 0 (Brand): ${brandName}`);
    const brand = new Category({
      name: brandName,
      description: `${brandName} generated by faker for testing`,
      parentId: null,
      level: 0,
      path: brandSlug,
      isActive: true,
      sortOrder: 1,
    });
    const savedBrand = await brand.save();
    console.log('✅ Created:', savedBrand.name, '- Path:', savedBrand.path);

    const categoryName = `${faker.commerce.department()} Test Category`;
    const categorySlug = `test-${faker.helpers.slugify(categoryName.toLowerCase())}`;

    // Test 2: Create category level (Level 1)
    console.log(`\n2️⃣ Creating Level 1 (Category): ${categoryName}`);
    const category = new Category({
      name: categoryName,
      description: `${categoryName} generated by faker for testing`,
      parentId: savedBrand._id.toString(),
      level: 1,
      path: `${brandSlug}/${categorySlug}`,
      isActive: true,
      sortOrder: 1,
    });
    const savedCategory = await category.save();
    console.log('✅ Created:', savedCategory.name, '- Path:', savedCategory.path);

    const subcategoryName = `${faker.commerce.productAdjective()} ${faker.commerce.product()} Test Subcategory`;
    const subcategorySlug = `test-${faker.helpers.slugify(subcategoryName.toLowerCase())}`;

    // Test 3: Create subcategory level (Level 2)
    console.log(`\n3️⃣ Creating Level 2 (Subcategory): ${subcategoryName}`);
    const subcategory = new Category({
      name: subcategoryName,
      description: `${subcategoryName} generated by faker for testing`,
      parentId: savedCategory._id.toString(),
      level: 2,
      path: `${brandSlug}/${categorySlug}/${subcategorySlug}`,
      isActive: true,
      sortOrder: 1,
    });
    const savedSubcategory = await subcategory.save();
    console.log('✅ Created:', savedSubcategory.name, '- Path:', savedSubcategory.path);

    // Test 4: Query all test categories
    console.log('\n4️⃣ Querying all test categories:');
    const allCategories = await Category.find({
      _id: { $in: [savedBrand._id, savedCategory._id, savedSubcategory._id] },
    }).sort({ level: 1, sortOrder: 1 });

    allCategories.forEach((cat) => {
      const indent = '  '.repeat(cat.level);
      console.log(`${indent}Level ${cat.level}: ${cat.name} (${cat.path})`);
    });

    // Test 5: Test validation - try invalid level
    console.log('\n5️⃣ Testing validation (this should fail):');
    try {
      const invalidName = `${faker.commerce.productName()} Invalid Level`;
      const invalidSlug = `test-${faker.helpers.slugify(invalidName.toLowerCase())}`;

      const invalidCategory = new Category({
        name: invalidName,
        description: `${invalidName} - This should fail validation`,
        parentId: null,
        level: 5, // Invalid level > 2
        path: invalidSlug,
        isActive: true,
        sortOrder: 1,
      });
      await invalidCategory.save();
    } catch (error) {
      console.log('✅ Validation worked! Error:', (error as Error).message);
    }

    console.log('\n🎉 All tests passed! Category model is working correctly.');
  } catch (error) {
    console.error('❌ Test failed:', error);
  }
}

// Run the tests
async function runTests() {
  await connectDB();
  await testCategoryModel();
  await mongoose.disconnect();
  console.log('\n✅ Disconnected from MongoDB');
}

runTests();
