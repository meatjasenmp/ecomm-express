import request from 'supertest';
import express from 'express';
import { faker } from '@faker-js/faker';
import { createSlug } from '../../../app/helpers/slugify.ts';
import Category from '../../../app/db/models/Categories.ts';
import Product from '../../../app/db/models/Products.ts';
import categoryRoutes from '../../../app/routes/admin.categories.ts';

const app = express();
app.use(express.json());
app.use(categoryRoutes);

describe('DELETE /delete-category/:id', () => {
  beforeAll(() => {
    faker.seed(123);
  });

  beforeEach(async () => {
    await Category.deleteMany({
      $or: [{ path: { $regex: /^(brand|category|subcategory)-/i } }, { description: { $regex: /faker/i } }],
    });
    await Product.deleteMany({ description: { $regex: /faker/i } });
  });

  afterEach(async () => {
    await Category.deleteMany({
      $or: [{ path: { $regex: /^(brand|category|subcategory)-/i } }, { description: { $regex: /faker/i } }],
    });
    await Product.deleteMany({ description: { $regex: /faker/i } });
  });

  it('should soft delete a category successfully', async () => {
    const brandName = `${faker.company.name()} Brand ${Date.now()}`;

    const category = await Category.create({
      name: brandName,
      description: `${brandName} generated by faker for testing`,
      level: 0,
      parentId: null,
      path: createSlug(brandName),
      ancestors: [],
      sortOrder: 1,
      isActive: true,
    });

    const response = await request(app).delete(`/delete-category/${category._id}`).expect(200);

    expect(response.body.message).toBe('Category deleted successfully');

    const deletedCategory = await Category.findById(category._id);
    expect(deletedCategory?.deletedAt).toBeDefined();
    expect(deletedCategory?.deletedAt).toBeInstanceOf(Date);
    expect(deletedCategory?.path).toBe(createSlug(brandName));
  });

  it('should return 400 for invalid category ID', async () => {
    await request(app).delete('/delete-category/invalid-id').expect(400);
  });

  it('should return 404 for non-existent category', async () => {
    await request(app).delete('/delete-category/507f1f77bcf86cd799439011').expect(404);
  });

  it('should return 404 for already deleted category', async () => {
    const brandName = `${faker.company.name()} Brand ${Date.now()}`;

    const category = await Category.create({
      name: brandName,
      description: `${brandName} generated by faker for testing`,
      level: 0,
      parentId: null,
      path: createSlug(brandName),
      ancestors: [],
      sortOrder: 1,
      isActive: true,
      deletedAt: new Date(),
    });

    await request(app).delete(`/delete-category/${category._id}`).expect(404);
  });

  it('should return 400 when category has subcategories', async () => {
    const brandName = `${faker.company.name()} Brand ${Date.now()}`;
    const categoryName = `${faker.commerce.department()} Category ${Date.now()}`;

    const brand = await Category.create({
      name: brandName,
      description: `${brandName} generated by faker for testing`,
      level: 0,
      parentId: null,
      path: createSlug(brandName),
      ancestors: [],
      sortOrder: 1,
      isActive: true,
    });

    await Category.create({
      name: categoryName,
      description: `${categoryName} generated by faker for testing`,
      level: 1,
      parentId: brand._id?.toString(),
      path: `${brand.path}/${createSlug(categoryName)}`,
      ancestors: [brand.path],
      sortOrder: 1,
      isActive: true,
    });

    await request(app).delete(`/delete-category/${brand._id}`).expect(400);
  });

  it('should return 400 when category is being used by products', async () => {
    const brandName = `${faker.company.name()} Brand ${Date.now()}`;

    const category = await Category.create({
      name: brandName,
      description: `${brandName} generated by faker for testing`,
      level: 0,
      parentId: null,
      path: createSlug(brandName),
      ancestors: [],
      sortOrder: 1,
      isActive: true,
    });

    await Product.create({
      title: 'Test Product',
      description: 'Product generated by faker for testing',
      shortDescription: 'Short description for testing',
      price: 100,
      categories: [category._id],
      images: [],
      isPublished: true,
    });

    await request(app).delete(`/delete-category/${category._id}`).expect(400);
  });

  it('should soft delete category and verify it is excluded from normal queries', async () => {
    const brandName = `${faker.company.name()} Brand ${Date.now()}`;

    const category = await Category.create({
      name: brandName,
      description: `${brandName} generated by faker for testing`,
      level: 0,
      parentId: null,
      path: createSlug(brandName),
      ancestors: [],
      sortOrder: 1,
      isActive: true,
    });

    await request(app).delete(`/delete-category/${category._id}`).expect(200);

    const activeCategories = await Category.find({ deletedAt: null });
    const deletedCategory = activeCategories.find((cat) => cat._id?.toString() === category._id?.toString());
    expect(deletedCategory).toBeUndefined();

    const allCategories = await Category.find({});
    const actualDeletedCategory = allCategories.find((cat) => cat._id?.toString() === category._id?.toString());
    expect(actualDeletedCategory?.deletedAt).toBeDefined();
    expect(actualDeletedCategory?.path).toBe(createSlug(brandName));
  });

  it('should soft delete level 2 category without affecting ancestors', async () => {
    const brandName = `${faker.company.name()} Brand ${Date.now()}`;
    const categoryName = `${faker.commerce.department()} Category ${Date.now()}`;
    const subcategoryName = `${faker.commerce.product()} Subcategory ${Date.now()}`;

    const brand = await Category.create({
      name: brandName,
      description: `${brandName} generated by faker for testing`,
      level: 0,
      parentId: null,
      path: createSlug(brandName),
      ancestors: [],
      sortOrder: 1,
      isActive: true,
    });

    const category = await Category.create({
      name: categoryName,
      description: `${categoryName} generated by faker for testing`,
      level: 1,
      parentId: brand._id?.toString(),
      path: `${brand.path}/${createSlug(categoryName)}`,
      ancestors: [brand.path],
      sortOrder: 1,
      isActive: true,
    });

    const subcategory = await Category.create({
      name: subcategoryName,
      description: `${subcategoryName} generated by faker for testing`,
      level: 2,
      parentId: category._id?.toString(),
      path: `${category.path}/${createSlug(subcategoryName)}`,
      ancestors: [brand.path, category.path],
      sortOrder: 1,
      isActive: true,
    });

    await request(app).delete(`/delete-category/${subcategory._id}`).expect(200);

    const deletedSubcategory = await Category.findById(subcategory._id);
    expect(deletedSubcategory?.deletedAt).toBeDefined();
    expect(deletedSubcategory?.path).toBe(`${category.path}/${createSlug(subcategoryName)}`);

    const brandAfter = await Category.findById(brand._id);
    const categoryAfter = await Category.findById(category._id);
    expect(brandAfter?.deletedAt).toBeNull();
    expect(categoryAfter?.deletedAt).toBeNull();
  });
});
