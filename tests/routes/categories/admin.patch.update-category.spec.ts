import request from 'supertest';
import express from 'express';
import { faker } from '@faker-js/faker';
import { createSlug } from '../../../app/helpers/slugify.ts';
import Category, { type CategoryInterface } from '../../../app/db/models/Categories.ts';
import Product from '../../../app/db/models/Products.ts';
import categoryRoutes from '../../../app/routes/admin.categories.ts';

const app = express();
app.use(express.json());
app.use(categoryRoutes);

describe('PATCH /update-category/:id', () => {
  beforeAll(() => {
    faker.seed(123);
  });

  beforeEach(async () => {
    await Category.deleteMany({
      $or: [{ path: { $regex: /^(brand|category|subcategory)-/i } }, { description: { $regex: /faker/i } }],
    });
    await Product.deleteMany({ description: { $regex: /faker/i } });
  });

  afterEach(async () => {
    await Category.deleteMany({
      $or: [{ path: { $regex: /^(brand|category|subcategory)-/i } }, { description: { $regex: /faker/i } }],
    });
    await Product.deleteMany({ description: { $regex: /faker/i } });
  });

  it('should update category name and description', async () => {
    const originalName = `${faker.company.name()} Original Brand ${Date.now()}`;
    const updatedName = `${faker.company.name()} Updated Brand ${Date.now() + 1}`;
    const updatedDescription = 'Updated description for testing';

    const category = await Category.create({
      name: originalName,
      description: `${originalName} generated by faker for testing`,
      level: 0,
      parentId: null,
      path: createSlug(originalName),
      ancestors: [],
      sortOrder: 1,
      isActive: true,
    });

    const updateData = {
      name: updatedName,
      description: updatedDescription,
    };

    const response = await request(app).patch(`/update-category/${category._id}`).send(updateData).expect(200);

    const updatedCategory = response.body as CategoryInterface;
    expect(updatedCategory.name).toBe(updatedName);
    expect(updatedCategory.description).toBe(updatedDescription);
    expect(updatedCategory.level).toBe(0);
    expect(updatedCategory.parentId).toBeNull();
    expect(updatedCategory._id?.toString()).toBe(category._id?.toString());
    expect(updatedCategory.path).toBe(createSlug(updatedName));
  });

  it('should update only name', async () => {
    const originalName = `${faker.company.name()} Original Brand ${Date.now()}`;
    const updatedName = `${faker.company.name()} Updated Brand ${Date.now() + 1}`;
    const originalDescription = `${originalName} generated by faker for testing`;

    const category = await Category.create({
      name: originalName,
      description: originalDescription,
      level: 0,
      parentId: null,
      path: createSlug(originalName),
      ancestors: [],
      sortOrder: 1,
      isActive: true,
    });

    const updateData = {
      name: updatedName,
    };

    const response = await request(app).patch(`/update-category/${category._id}`).send(updateData).expect(200);

    const updatedCategory = response.body as CategoryInterface;
    expect(updatedCategory.name).toBe(updatedName);
    expect(updatedCategory.description).toBe(originalDescription);
    expect(updatedCategory.path).toBe(createSlug(updatedName));
  });

  it('should update sortOrder', async () => {
    const brandName = `${faker.company.name()} Brand`;

    const category = await Category.create({
      name: brandName,
      description: `${brandName} generated by faker for testing`,
      level: 0,
      parentId: null,
      path: createSlug(brandName),
      ancestors: [],
      sortOrder: 1,
      isActive: true,
    });

    const updateData = {
      sortOrder: 5,
    };

    const response = await request(app).patch(`/update-category/${category._id}`).send(updateData).expect(200);

    const updatedCategory = response.body as CategoryInterface;
    expect(updatedCategory.sortOrder).toBe(5);
    expect(updatedCategory.name).toBe(brandName);
    expect(updatedCategory.path).toBe(createSlug(brandName));
  });

  it('should return 400 for invalid category ID', async () => {
    const updateData = {
      name: 'Updated Name',
    };

    await request(app).patch('/update-category/invalid-id').send(updateData).expect(400);
  });

  it('should return 404 for non-existent category', async () => {
    const updateData = {
      name: 'Updated Name',
    };

    await request(app).patch('/update-category/507f1f77bcf86cd799439011').send(updateData).expect(404);
  });

  it('should return 400 for invalid field values', async () => {
    const brandName = `${faker.company.name()} Brand`;

    const category = await Category.create({
      name: brandName,
      description: `${brandName} generated by faker for testing`,
      level: 0,
      parentId: null,
      path: createSlug(brandName),
      ancestors: [],
      sortOrder: 1,
      isActive: true,
    });

    await request(app)
      .patch(`/update-category/${category._id}`)
      .send({ name: '' }) // Min length 1
      .expect(400);

    await request(app)
      .patch(`/update-category/${category._id}`)
      .send({ name: 'a'.repeat(101) }) // Max length 100
      .expect(400);

    await request(app)
      .patch(`/update-category/${category._id}`)
      .send({ description: '' }) // Min length 1
      .expect(400);

    await request(app)
      .patch(`/update-category/${category._id}`)
      .send({ description: 'a'.repeat(501) }) // Max length 500
      .expect(400);

    await request(app).patch(`/update-category/${category._id}`).send({ level: 5 }).expect(400);
    await request(app).patch(`/update-category/${category._id}`).send({ sortOrder: -1 }).expect(400);
  });

  it('should return 400 for invalid hierarchy changes', async () => {
    const brandName = `${faker.company.name()} Brand`;
    const categoryName = `${faker.commerce.department()} Category`;

    const brand = await Category.create({
      name: brandName,
      description: `${brandName} generated by faker for testing`,
      level: 0,
      parentId: null,
      path: createSlug(brandName),
      ancestors: [],
      sortOrder: 1,
      isActive: true,
    });

    const category = await Category.create({
      name: categoryName,
      description: `${categoryName} generated by faker for testing`,
      level: 1,
      parentId: brand._id?.toString(),
      path: `${brand.path}/${createSlug(categoryName)}`,
      ancestors: [brand.path],
      sortOrder: 1,
      isActive: true,
    });

    await request(app)
      .patch(`/update-category/${category._id}`)
      .send({
        parentId: brand._id?.toString(),
        level: 2,
      })
      .expect(400);
  });

  it('should return 400 for non-existent parent', async () => {
    const brandName = `${faker.company.name()} Brand`;

    const category = await Category.create({
      name: brandName,
      description: `${brandName} generated by faker for testing`,
      level: 0,
      parentId: null,
      path: createSlug(brandName),
      ancestors: [],
      sortOrder: 1,
      isActive: true,
    });

    await request(app)
      .patch(`/update-category/${category._id}`)
      .send({
        parentId: '507f1f77bcf86cd799439011',
        level: 1,
      })
      .expect(400);
  });

  it('should update parentId and level (move category)', async () => {
    const brandName = `${faker.company.name()} Brand`;
    const brand2Name = `${faker.company.name()} Brand 2`;
    const categoryName = `${faker.commerce.department()} Category`;

    const brand1 = await Category.create({
      name: brandName,
      description: `${brandName} generated by faker for testing`,
      level: 0,
      parentId: null,
      path: createSlug(brandName),
      ancestors: [],
      sortOrder: 1,
      isActive: true,
    });

    const brand2 = await Category.create({
      name: brand2Name,
      description: `${brand2Name} generated by faker for testing`,
      level: 0,
      parentId: null,
      path: createSlug(brand2Name),
      ancestors: [],
      sortOrder: 2,
      isActive: true,
    });

    const category = await Category.create({
      name: categoryName,
      description: `${categoryName} generated by faker for testing`,
      level: 1,
      parentId: brand1._id?.toString(),
      path: `${brand1.path}/${createSlug(categoryName)}`,
      ancestors: [brand1.path],
      sortOrder: 1,
      isActive: true,
    });

    const updateData = {
      parentId: brand2._id?.toString(),
      level: 1,
    };

    const response = await request(app).patch(`/update-category/${category._id}`).send(updateData).expect(200);

    const updatedCategory = response.body as CategoryInterface;
    expect(updatedCategory.parentId).toBe(brand2._id?.toString());
    expect(updatedCategory.level).toBe(1);
    expect(updatedCategory.ancestors).toEqual([brand2.path]);
    expect(updatedCategory.path).toBe(`${brand2.path}/${createSlug(categoryName)}`);
  });

  it('should handle empty update (no changes)', async () => {
    const brandName = `${faker.company.name()} Brand`;

    const category = await Category.create({
      name: brandName,
      description: `${brandName} generated by faker for testing`,
      level: 0,
      parentId: null,
      path: createSlug(brandName),
      ancestors: [],
      sortOrder: 1,
      isActive: true,
    });

    const response = await request(app).patch(`/update-category/${category._id}`).send({}).expect(200);

    const updatedCategory = response.body as CategoryInterface;
    expect(updatedCategory.name).toBe(brandName);
    expect(updatedCategory.description).toBe(`${brandName} generated by faker for testing`);
    expect(updatedCategory._id?.toString()).toBe(category._id?.toString());
    expect(updatedCategory.path).toBe(createSlug(brandName));
  });
});
