import request from 'supertest';
import express from 'express';
import { faker } from '@faker-js/faker';
import Category, { type CategoryInterface } from '../../../app/db/models/Categories.ts';
import Product from '../../../app/db/models/Products.ts';
import categoryRoutes from '../../../app/routes/admin.categories.ts';

const app = express();
app.use(express.json());
app.use(categoryRoutes);

describe('POST /create-category', () => {
  beforeAll(() => {
    faker.seed(123);
  });

  beforeEach(async () => {
    await Category.deleteMany({
      $or: [{ path: { $regex: /^(brand|category|subcategory)-/i } }, { description: { $regex: /faker/i } }],
    });
    await Product.deleteMany({ description: { $regex: /faker/i } });
  });

  afterEach(async () => {
    await Category.deleteMany({
      $or: [{ path: { $regex: /^(brand|category|subcategory)-/i } }, { description: { $regex: /faker/i } }],
    });
    await Product.deleteMany({ description: { $regex: /faker/i } });
  });

  it('should create a root level category (brand)', async () => {
    const brandName = `${faker.company.name()} Brand`;
    const brandData = {
      name: brandName,
      description: `${brandName} generated by faker for testing`,
      level: 0,
      parentId: null,
      sortOrder: 1,
    };

    const response = await request(app)
      .post('/create-category')
      .send(brandData)
      .expect(201);

    const createdCategory = response.body as CategoryInterface;
    expect(createdCategory).toBeDefined();
    expect(createdCategory.name).toBe(brandName);
    expect(createdCategory.level).toBe(0);
    expect(createdCategory.parentId).toBeNull();
    expect(createdCategory.ancestors).toEqual([]);
    expect(createdCategory.isActive).toBe(true);
    expect(createdCategory.path).toBe(faker.helpers.slugify(brandName.toLowerCase()));
    expect(createdCategory._id).toBeDefined();
    expect(createdCategory.createdAt).toBeDefined();
    expect(createdCategory.updatedAt).toBeDefined();
  });

  it('should create a level 1 category with parent', async () => {
    const brandName = `${faker.company.name()} Brand`;
    const categoryName = `${faker.commerce.department()} Category`;

    // First create parent brand
    const brand = await Category.create({
      name: brandName,
      description: `${brandName} generated by faker for testing`,
      level: 0,
      parentId: null,
      path: faker.helpers.slugify(brandName.toLowerCase()),
      ancestors: [],
      sortOrder: 1,
      isActive: true,
    });

    const categoryData = {
      name: categoryName,
      description: `${categoryName} generated by faker for testing`,
      level: 1,
      parentId: brand._id?.toString(),
      sortOrder: 1,
    };

    const response = await request(app)
      .post('/create-category')
      .send(categoryData)
      .expect(201);

    const createdCategory = response.body as CategoryInterface;
    expect(createdCategory).toBeDefined();
    expect(createdCategory.name).toBe(categoryName);
    expect(createdCategory.level).toBe(1);
    expect(createdCategory.parentId).toBe(brand._id?.toString());
    expect(createdCategory.ancestors).toEqual([brand.path]);
    expect(createdCategory.path).toBe(`${brand.path}/${faker.helpers.slugify(categoryName.toLowerCase())}`);
  });

  it('should create a level 2 category (subcategory) with proper hierarchy', async () => {
    const brandName = `${faker.company.name()} Brand`;
    const categoryName = `${faker.commerce.department()} Category`;
    const subcategoryName = `${faker.commerce.product()} Subcategory`;

    // Create parent hierarchy
    const brand = await Category.create({
      name: brandName,
      description: `${brandName} generated by faker for testing`,
      level: 0,
      parentId: null,
      path: faker.helpers.slugify(brandName.toLowerCase()),
      ancestors: [],
      sortOrder: 1,
      isActive: true,
    });

    const category = await Category.create({
      name: categoryName,
      description: `${categoryName} generated by faker for testing`,
      level: 1,
      parentId: brand._id?.toString(),
      path: `${brand.path}/${faker.helpers.slugify(categoryName.toLowerCase())}`,
      ancestors: [brand.path],
      sortOrder: 1,
      isActive: true,
    });

    const subcategoryData = {
      name: subcategoryName,
      description: `${subcategoryName} generated by faker for testing`,
      level: 2,
      parentId: category._id?.toString(),
      sortOrder: 1,
    };

    const response = await request(app)
      .post('/create-category')
      .send(subcategoryData)
      .expect(201);

    const createdSubcategory = response.body as CategoryInterface;
    expect(createdSubcategory).toBeDefined();
    expect(createdSubcategory.name).toBe(subcategoryName);
    expect(createdSubcategory.level).toBe(2);
    expect(createdSubcategory.parentId).toBe(category._id?.toString());
    expect(createdSubcategory.ancestors).toEqual([brand.path, category.path]);
    expect(createdSubcategory.path).toBe(`${category.path}/${faker.helpers.slugify(subcategoryName.toLowerCase())}`);
  });

  it('should return 400 for missing required fields', async () => {
    const incompleteData = {
      description: 'Missing name field',
      level: 0,
    };

    await request(app)
      .post('/create-category')
      .send(incompleteData)
      .expect(400);
  });

  it('should return 400 for invalid level', async () => {
    const invalidData = {
      name: 'Invalid Level Category',
      description: 'Category with invalid level',
      level: 5,
      parentId: null,
    };

    await request(app)
      .post('/create-category')
      .send(invalidData)
      .expect(400);
  });

  it('should return 400 for invalid hierarchy (level 2 with level 0 parent)', async () => {
    const brandName = `${faker.company.name()} Brand`;

    // Create level 0 parent
    const brand = await Category.create({
      name: brandName,
      description: `${brandName} generated by faker for testing`,
      level: 0,
      parentId: null,
      path: faker.helpers.slugify(brandName.toLowerCase()),
      ancestors: [],
      sortOrder: 1,
      isActive: true,
    });

    const invalidHierarchyData = {
      name: 'Invalid Hierarchy',
      description: 'Trying to create level 2 with level 0 parent',
      level: 2,
      parentId: brand._id?.toString(),
      sortOrder: 1,
    };

    await request(app)
      .post('/create-category')
      .send(invalidHierarchyData)
      .expect(400);
  });

  it('should return 400 for duplicate paths', async () => {
    const brandName = `${faker.company.name()} Brand`;
    const categoryData = {
      name: brandName,
      description: `${brandName} generated by faker for testing`,
      level: 0,
      parentId: null,
      sortOrder: 1,
    };

    // Create first category
    await request(app)
      .post('/create-category')
      .send(categoryData)
      .expect(201);

    // Try to create duplicate
    await request(app)
      .post('/create-category')
      .send(categoryData)
      .expect(400);
  });

  it('should return 400 for non-existent parent', async () => {
    const categoryData = {
      name: 'Orphan Category',
      description: 'Category with non-existent parent',
      level: 1,
      parentId: '507f1f77bcf86cd799439011', // Valid ObjectId format but doesn't exist
      sortOrder: 1,
    };

    await request(app)
      .post('/create-category')
      .send(categoryData)
      .expect(400);
  });

  it('should return 400 for invalid string lengths', async () => {
    const longName = 'a'.repeat(101);
    const longDescription = 'a'.repeat(501);

    await request(app)
      .post('/create-category')
      .send({
        name: longName,
        description: 'Valid description',
        level: 0,
      })
      .expect(400);

    await request(app)
      .post('/create-category')
      .send({
        name: 'Valid name',
        description: longDescription,
        level: 0,
      })
      .expect(400);
  });

  it('should use default values when not provided', async () => {
    const minimalData = {
      name: 'Minimal Category',
      description: 'Category with minimal data',
    };

    const response = await request(app)
      .post('/create-category')
      .send(minimalData)
      .expect(201);

    const createdCategory = response.body as CategoryInterface;
    expect(createdCategory.level).toBe(0);
    expect(createdCategory.parentId).toBeNull();
    expect(createdCategory.sortOrder).toBe(0);
    expect(createdCategory.isActive).toBe(true);
  });
});